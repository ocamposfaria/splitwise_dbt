{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v5.json", "dbt_version": "1.1.5", "generated_at": "2023-09-06T12:00:26.955618Z", "invocation_id": "7553c4c2-5ae2-404a-8f1f-f6bed1f8edc4", "env": {}, "project_id": "b8b38d8c03d2f4da648e4a973768b2ec", "user_id": "f6debbe9-531a-4a71-8137-b573f5472181", "send_anonymous_usage_stats": true, "adapter_type": "mysql"}, "nodes": {"model.splitwise.duplicates_validation": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `splitwise_final`.`month` AS `month`,\r\n    `splitwise_final`.`category` AS `category`,\r\n    `splitwise_final`.`name` AS `name`,\r\n    `splitwise_final`.`cost` AS `cost`,\r\n    COUNT(`splitwise_final`.`expense_id`) AS `COUNT(expense_id)`,\r\n    MIN(`splitwise_final`.`expense_id`) AS `min(expense_id)`\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    (`splitwise_final`.`expense_id` NOT IN ('2273815986' , '2221041952',\r\n        '1981650253',\r\n        '2273865471',\r\n        '2206184023',\r\n        '2103586878',\r\n        '2066617090',\r\n        '2087483227',\r\n        '2002904517',\r\n        '1962561756',\r\n        '1981684264',\r\n        '1941295676',\r\n        '1866736829',\r\n        '1866720926',\r\n        '1866755093',\r\n        '2273818781',\r\n        '2231964741',\r\n        '1886089931',\r\n        '2273821296'))\r\nGROUP BY `splitwise_final`.`month` , `splitwise_final`.`category` , `splitwise_final`.`name` , `splitwise_final`.`cost`\r\nHAVING (`COUNT(expense_id)` > 1)\r\nORDER BY `splitwise_final`.`month` DESC , COUNT(`splitwise_final`.`expense_id`) DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "duplicates_validation"], "unique_id": "model.splitwise.duplicates_validation", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "duplicates_validation.sql", "original_file_path": "models\\duplicates_validation.sql", "name": "duplicates_validation", "alias": "duplicates_validation", "checksum": {"name": "sha256", "checksum": "e8bda5f922b2abcb95c2f13d82d58378caa9ec1592363c5f68bdf06c7fda2fff"}, "tags": [], "refs": [["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\duplicates_validation.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4206662, "compiled_sql": "\n\nSELECT \n    `splitwise_final`.`month` AS `month`,\n    `splitwise_final`.`category` AS `category`,\n    `splitwise_final`.`name` AS `name`,\n    `splitwise_final`.`cost` AS `cost`,\n    COUNT(`splitwise_final`.`expense_id`) AS `COUNT(expense_id)`,\n    MIN(`splitwise_final`.`expense_id`) AS `min(expense_id)`\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    (`splitwise_final`.`expense_id` NOT IN ('2273815986' , '2221041952',\n        '1981650253',\n        '2273865471',\n        '2206184023',\n        '2103586878',\n        '2066617090',\n        '2087483227',\n        '2002904517',\n        '1962561756',\n        '1981684264',\n        '1941295676',\n        '1866736829',\n        '1866720926',\n        '1866755093',\n        '2273818781',\n        '2231964741',\n        '1886089931',\n        '2273821296'))\nGROUP BY `splitwise_final`.`month` , `splitwise_final`.`category` , `splitwise_final`.`name` , `splitwise_final`.`cost`\nHAVING (`COUNT(expense_id)` > 1)\nORDER BY `splitwise_final`.`month` DESC , COUNT(`splitwise_final`.`expense_id`) DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`duplicates_validation`"}, "model.splitwise.earnings_final": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    NULL AS `expense_id`,\r\n    `earnings`.`category` AS `category`,\r\n    `earnings`.`name` AS `name`,\r\n    (-(`earnings`.`cost_juau`) - `earnings`.`cost_lana`) AS `cost`,\r\n    -(`earnings`.`cost_juau`) AS `cost_juau`,\r\n    -(`earnings`.`cost_lana`) AS `cost_lana`,\r\n    `earnings`.`month` AS `month`,\r\n    NULL AS `created_at`,\r\n    NULL AS `updated_at`,\r\n    'Jo\u00e3o' AS created_by,\r\n    (CASE\r\n        WHEN (earnings.cost_juau <> 0) THEN 'just me'\r\n        WHEN (earnings.cost_lana <> 0) THEN 'apenas lana'\r\n    END) AS source,\r\n    (CASE\r\n        WHEN (earnings.cost_juau <> 0) THEN 100\r\n        ELSE 0\r\n    END) AS percentage_juau,\r\n    (CASE\r\n        WHEN (earnings.cost_lana <> 0) THEN 100\r\n        ELSE 0\r\n    END) AS percentage_lana\r\nFROM\r\n    bob.earnings", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "earnings_final"], "unique_id": "model.splitwise.earnings_final", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "earnings_final.sql", "original_file_path": "models\\earnings_final.sql", "name": "earnings_final", "alias": "earnings_final", "checksum": {"name": "sha256", "checksum": "cb2778f90fbbf86ea095075b47334421505a55ed4b279928d7a6ac43e688b538"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\earnings_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4316654, "compiled_sql": "\n\nSELECT \n    NULL AS `expense_id`,\n    `earnings`.`category` AS `category`,\n    `earnings`.`name` AS `name`,\n    (-(`earnings`.`cost_juau`) - `earnings`.`cost_lana`) AS `cost`,\n    -(`earnings`.`cost_juau`) AS `cost_juau`,\n    -(`earnings`.`cost_lana`) AS `cost_lana`,\n    `earnings`.`month` AS `month`,\n    NULL AS `created_at`,\n    NULL AS `updated_at`,\n    'Jo\u00e3o' AS created_by,\n    (CASE\n        WHEN (earnings.cost_juau <> 0) THEN 'just me'\n        WHEN (earnings.cost_lana <> 0) THEN 'apenas lana'\n    END) AS source,\n    (CASE\n        WHEN (earnings.cost_juau <> 0) THEN 100\n        ELSE 0\n    END) AS percentage_juau,\n    (CASE\n        WHEN (earnings.cost_lana <> 0) THEN 100\n        ELSE 0\n    END) AS percentage_lana\nFROM\n    bob.earnings", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`earnings_final`"}, "model.splitwise.limits": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n\tcategory,\r\n    cost,\r\n    if(category = 'apenas jo\u00e3o', cost, if(ln.cost_juau <> 0, ln.cost_juau, ln.cost*percentage_juau)) as cost_juau,\r\n    if(category = 'apenas lana', cost, if(ln.cost_lana <> 0, ln.cost_lana, ln.cost*percentage_lana)) as cost_lana,\r\n    sm.month\r\nFROM\r\n\tbob.limits_sheet ln\r\nJOIN {{ref('some_months')}} sm ON sm.month >= version_month_from and sm.month <= version_month_to\r\nJOIN {{ref('monthly_percentages')}} mp on sm.month = mp.month\r\n\r\nWHERE concat(sm.month, '-01') <= curdate()", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.some_months", "model.splitwise.monthly_percentages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "limits"], "unique_id": "model.splitwise.limits", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "limits.sql", "original_file_path": "models\\limits.sql", "name": "limits", "alias": "limits", "checksum": {"name": "sha256", "checksum": "8250dc7399844975948845fe6993871ba386a3e0dda8f5041bc6572c98f4339e"}, "tags": [], "refs": [["some_months"], ["monthly_percentages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\limits.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4346678, "compiled_sql": "\n\nSELECT \n\tcategory,\n    cost,\n    if(category = 'apenas jo\u00e3o', cost, if(ln.cost_juau <> 0, ln.cost_juau, ln.cost*percentage_juau)) as cost_juau,\n    if(category = 'apenas lana', cost, if(ln.cost_lana <> 0, ln.cost_lana, ln.cost*percentage_lana)) as cost_lana,\n    sm.month\nFROM\n\tbob.limits_sheet ln\nJOIN `bob`.`some_months` sm ON sm.month >= version_month_from and sm.month <= version_month_to\nJOIN `bob`.`monthly_percentages` mp on sm.month = mp.month\n\nWHERE concat(sm.month, '-01') <= curdate()", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`limits`"}, "model.splitwise.limits_final": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    l.month AS month,\r\n    l.category AS category,\r\n    IFNULL(mc.month_cost_house, 0) AS month_cost_house,\r\n    l.cost AS limit_house,\r\n    IFNULL(mc.month_cost_juau, 0) AS month_cost_juau,\r\n    l.cost_juau AS limit_juau,\r\n    IFNULL(mc.month_cost_lana, 0) AS month_cost_lana,\r\n    l.cost_lana AS limit_lana\r\nFROM\r\n    ({{ref('limits')}} l\r\n    LEFT JOIN (SELECT \r\n\t\t\t\t\tsplitwise_final.month AS month,\r\n\t\t\t\t\tsplitwise_final.category AS category,\r\n\t\t\t\t\tSUM(splitwise_final.cost) AS month_cost_house,\r\n\t\t\t\t\tSUM(splitwise_final.cost_juau) AS month_cost_juau,\r\n\t\t\t\t\tSUM(splitwise_final.cost_lana) AS month_cost_lana\r\n\t\t\t\tFROM\r\n\t\t\t\t\t{{ref('splitwise_final')}}\r\n\t\t\t\tWHERE\r\n\t\t\t\t\t(splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n\t\t\t\t\tGROUP BY splitwise_final.month, splitwise_final.category\r\n\t\t\t\t) mc ON (((mc.month = l.month) AND (mc.category = l.category))))\r\nORDER BY l.month DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.limits", "model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "limits_final"], "unique_id": "model.splitwise.limits_final", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "limits_final.sql", "original_file_path": "models\\limits_final.sql", "name": "limits_final", "alias": "limits_final", "checksum": {"name": "sha256", "checksum": "84a0db4a8bacbb4773163c82f47da814a173c1cdafc40d6781a8f3bd003a7bd1"}, "tags": [], "refs": [["limits"], ["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\limits_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.436667, "compiled_sql": "\n\nSELECT \n    l.month AS month,\n    l.category AS category,\n    IFNULL(mc.month_cost_house, 0) AS month_cost_house,\n    l.cost AS limit_house,\n    IFNULL(mc.month_cost_juau, 0) AS month_cost_juau,\n    l.cost_juau AS limit_juau,\n    IFNULL(mc.month_cost_lana, 0) AS month_cost_lana,\n    l.cost_lana AS limit_lana\nFROM\n    (`bob`.`limits` l\n    LEFT JOIN (SELECT \n\t\t\t\t\tsplitwise_final.month AS month,\n\t\t\t\t\tsplitwise_final.category AS category,\n\t\t\t\t\tSUM(splitwise_final.cost) AS month_cost_house,\n\t\t\t\t\tSUM(splitwise_final.cost_juau) AS month_cost_juau,\n\t\t\t\t\tSUM(splitwise_final.cost_lana) AS month_cost_lana\n\t\t\t\tFROM\n\t\t\t\t\t`bob`.`splitwise_final`\n\t\t\t\tWHERE\n\t\t\t\t\t(splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n\t\t\t\t\tGROUP BY splitwise_final.month, splitwise_final.category\n\t\t\t\t) mc ON (((mc.month = l.month) AND (mc.category = l.category))))\nORDER BY l.month DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`limits_final`"}, "model.splitwise.monthly_costs": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n\t`splitwise_final`.`month` AS `month`,\r\n\t`splitwise_final`.`name` AS `name`,\r\n\t(CASE\r\n\t\tWHEN (`splitwise_final`.`source` = 'VR') THEN 'monthly costs'\r\n\t\tWHEN\r\n\t\t\t((`splitwise_final`.`source` IN ('just me' , 'Nossa Residencia'))\r\n\t\t\t\tAND (splitwise_final.category <> 'compras'))\r\n\t\tTHEN\r\n\t\t\t'monthly costs'\r\n\t\tWHEN\r\n\t\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\r\n\t\t\t\tAND (splitwise_final.category = 'compras'))\r\n\t\tTHEN\r\n\t\t\t'compras'\r\n\t\tELSE splitwise_final.source\r\n\tEND) AS source,\r\n\tSUM(splitwise_final.cost_juau) AS cost,\r\n\t'jo\u00e3o' AS `cost by`\r\nFROM\r\n\t{{ref('splitwise_final')}}\r\nWHERE\r\n\t((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra'))\r\n\t\tAND (splitwise_final.source <> 'Black Mobly'))\r\nGROUP BY splitwise_final.month , splitwise_final.name , (CASE\r\n\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\r\n\tWHEN\r\n\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\r\n\t\t\tAND (splitwise_final.category <> 'compras'))\r\n\tTHEN\r\n\t\t'monthly costs'\r\n\tWHEN\r\n\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\r\n\t\t\tAND (splitwise_final.category = 'compras'))\r\n\tTHEN\r\n\t\t'compras'\r\n\tELSE splitwise_final.source\r\nEND) \r\nUNION ALL SELECT \r\n\tsplitwise_final.month AS month,\r\n\tsplitwise_final.`name` AS name,\r\n\t(CASE\r\n\t\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\r\n\t\tWHEN\r\n\t\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\r\n\t\t\t\tAND (splitwise_final.category <> 'compras'))\r\n\t\tTHEN\r\n\t\t\t'monthly costs'\r\n\t\tWHEN\r\n\t\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\r\n\t\t\t\tAND (splitwise_final.category = 'compras'))\r\n\t\tTHEN\r\n\t\t\t'compras'\r\n\t\tELSE splitwise_final.source\r\n\tEND) AS source,\r\n\tSUM(splitwise_final.cost_lana) AS cost,\r\n\t'lana' AS `cost by`\r\nFROM\r\n\t{{ref('splitwise_final')}}\r\nWHERE\r\n\t((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra'))\r\n\t\tAND (splitwise_final.source <> 'Black Mobly'))\r\nGROUP BY splitwise_final.month , splitwise_final.name , (CASE\r\n\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\r\n\tWHEN\r\n\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\r\n\t\t\tAND (splitwise_final.category <> 'compras'))\r\n\tTHEN\r\n\t\t'monthly costs'\r\n\tWHEN\r\n\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\r\n\t\t\tAND (splitwise_final.category = 'compras'))\r\n\tTHEN\r\n\t\t'compras'\r\n\tELSE splitwise_final.source\r\nEND)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "monthly_costs"], "unique_id": "model.splitwise.monthly_costs", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "monthly_costs.sql", "original_file_path": "models\\monthly_costs.sql", "name": "monthly_costs", "alias": "monthly_costs", "checksum": {"name": "sha256", "checksum": "3afa6a77eb752a4e41385456bb56f0eaf56736d2b67fdf555fd6c761b232ee0c"}, "tags": [], "refs": [["splitwise_final"], ["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\monthly_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4396663, "compiled_sql": "\n\nSELECT \n\t`splitwise_final`.`month` AS `month`,\n\t`splitwise_final`.`name` AS `name`,\n\t(CASE\n\t\tWHEN (`splitwise_final`.`source` = 'VR') THEN 'monthly costs'\n\t\tWHEN\n\t\t\t((`splitwise_final`.`source` IN ('just me' , 'Nossa Residencia'))\n\t\t\t\tAND (splitwise_final.category <> 'compras'))\n\t\tTHEN\n\t\t\t'monthly costs'\n\t\tWHEN\n\t\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\n\t\t\t\tAND (splitwise_final.category = 'compras'))\n\t\tTHEN\n\t\t\t'compras'\n\t\tELSE splitwise_final.source\n\tEND) AS source,\n\tSUM(splitwise_final.cost_juau) AS cost,\n\t'jo\u00e3o' AS `cost by`\nFROM\n\t`bob`.`splitwise_final`\nWHERE\n\t((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra'))\n\t\tAND (splitwise_final.source <> 'Black Mobly'))\nGROUP BY splitwise_final.month , splitwise_final.name , (CASE\n\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\n\tWHEN\n\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\n\t\t\tAND (splitwise_final.category <> 'compras'))\n\tTHEN\n\t\t'monthly costs'\n\tWHEN\n\t\t((splitwise_final.source IN ('just me' , 'Nossa Residencia'))\n\t\t\tAND (splitwise_final.category = 'compras'))\n\tTHEN\n\t\t'compras'\n\tELSE splitwise_final.source\nEND) \nUNION ALL SELECT \n\tsplitwise_final.month AS month,\n\tsplitwise_final.`name` AS name,\n\t(CASE\n\t\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\n\t\tWHEN\n\t\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\n\t\t\t\tAND (splitwise_final.category <> 'compras'))\n\t\tTHEN\n\t\t\t'monthly costs'\n\t\tWHEN\n\t\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\n\t\t\t\tAND (splitwise_final.category = 'compras'))\n\t\tTHEN\n\t\t\t'compras'\n\t\tELSE splitwise_final.source\n\tEND) AS source,\n\tSUM(splitwise_final.cost_lana) AS cost,\n\t'lana' AS `cost by`\nFROM\n\t`bob`.`splitwise_final`\nWHERE\n\t((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra'))\n\t\tAND (splitwise_final.source <> 'Black Mobly'))\nGROUP BY splitwise_final.month , splitwise_final.name , (CASE\n\tWHEN (splitwise_final.source = 'VR') THEN 'monthly costs'\n\tWHEN\n\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\n\t\t\tAND (splitwise_final.category <> 'compras'))\n\tTHEN\n\t\t'monthly costs'\n\tWHEN\n\t\t((splitwise_final.source IN ('apenas lana' , 'Nossa Residencia'))\n\t\t\tAND (splitwise_final.category = 'compras'))\n\tTHEN\n\t\t'compras'\n\tELSE splitwise_final.source\nEND)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`monthly_costs`"}, "model.splitwise.monthly_percentages": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\n-- percentuais at\u00e9 fevereiro de 2023, sem considerar VR na conta\r\n\r\nSELECT\r\n*,\r\ncost_juau/(cost_juau + cost_lana) as percentage_juau,\r\ncost_lana/(cost_juau + cost_lana) as percentage_lana\r\n\r\nFROM (\r\nSELECT\r\n\tmonth,\r\n    - sum(cost_juau) as cost_juau,\r\n    - sum(cost_lana) as cost_lana\r\n    \r\nFROM {{ref('earnings_final')}}\r\nWHERE month < '2023-03' and ((category = 'ganhos' and name not like '%VR%') or (category = 'ganhos extra' and name = 'PA'))\r\nGROUP BY 1\r\nORDER BY 1 DESC) ganhos\r\n\r\nunion all\r\n\r\n-- percentuais a partir de mar\u00e7o de 2023, considerando VR na conta\r\nSELECT\r\n*,\r\ncost_juau/(cost_juau + cost_lana) as percentage_juau,\r\ncost_lana/(cost_juau + cost_lana) as percentage_lana\r\n\r\nFROM (\r\nSELECT\r\n\tmonth,\r\n    - sum(cost_juau) as cost_juau,\r\n    - sum(cost_lana) as cost_lana\r\n    \r\nFROM {{ref('earnings_final')}}\r\nWHERE month >= '2023-03' and category = 'ganhos'\r\nGROUP BY 1\r\nORDER BY 1 DESC) ganhos\r\n\r\nORDER BY 1 DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.earnings_final", "model.splitwise.earnings_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "monthly_percentages"], "unique_id": "model.splitwise.monthly_percentages", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "monthly_percentages.sql", "original_file_path": "models\\monthly_percentages.sql", "name": "monthly_percentages", "alias": "monthly_percentages", "checksum": {"name": "sha256", "checksum": "23c67434f5311decc5436db20244fbea0b519d24ba87fa776d9e427104b40c56"}, "tags": [], "refs": [["earnings_final"], ["earnings_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\monthly_percentages.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4426315, "compiled_sql": "\n\n-- percentuais at\u00e9 fevereiro de 2023, sem considerar VR na conta\n\nSELECT\n*,\ncost_juau/(cost_juau + cost_lana) as percentage_juau,\ncost_lana/(cost_juau + cost_lana) as percentage_lana\n\nFROM (\nSELECT\n\tmonth,\n    - sum(cost_juau) as cost_juau,\n    - sum(cost_lana) as cost_lana\n    \nFROM `bob`.`earnings_final`\nWHERE month < '2023-03' and ((category = 'ganhos' and name not like '%VR%') or (category = 'ganhos extra' and name = 'PA'))\nGROUP BY 1\nORDER BY 1 DESC) ganhos\n\nunion all\n\n-- percentuais a partir de mar\u00e7o de 2023, considerando VR na conta\nSELECT\n*,\ncost_juau/(cost_juau + cost_lana) as percentage_juau,\ncost_lana/(cost_juau + cost_lana) as percentage_lana\n\nFROM (\nSELECT\n\tmonth,\n    - sum(cost_juau) as cost_juau,\n    - sum(cost_lana) as cost_lana\n    \nFROM `bob`.`earnings_final`\nWHERE month >= '2023-03' and category = 'ganhos'\nGROUP BY 1\nORDER BY 1 DESC) ganhos\n\nORDER BY 1 DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`monthly_percentages`"}, "model.splitwise.overall_costs": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `splitwise_final`.`month` AS `month`,\r\n    'nossa resid\u00eancia' AS `group`,\r\n    splitwise_final.category AS category,\r\n    SUM(splitwise_final.cost_juau) AS cost_juau,\r\n    SUM(splitwise_final.cost_lana) AS cost_lana\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n        AND (splitwise_final.category IN ('contas' , 'mercado',\r\n        'outros',\r\n        'transporte',\r\n        'alimenta\u00e7\u00e3o',\r\n        'feira',\r\n        'padaria',\r\n        'assinaturas',\r\n        'conveniencia',\r\n        'ganhos',\r\n        'ganhos extra')))\r\nGROUP BY 1, 2, 3 \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    'compras' AS `group`,\r\n    splitwise_final.category AS category,\r\n    SUM(splitwise_final.cost_juau) AS cost_juau,\r\n    SUM(splitwise_final.cost_lana) AS cost_lana\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n        AND (splitwise_final.category = 'compras'))\r\nGROUP BY splitwise_final.month , 'compras' , splitwise_final.category \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    'viagens' AS `group`,\r\n    splitwise_final.source AS category,\r\n    SUM(splitwise_final.cost_juau) AS cost_juau,\r\n    SUM(splitwise_final.cost_lana) AS cost_lana\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    ((splitwise_final.source NOT IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n        AND (splitwise_final.source <> 'Black Mobly'))\r\nGROUP BY splitwise_final.month , 'viagens' , splitwise_final.source \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    'apenas jo\u00e3o' AS `group`,\r\n    splitwise_final.category AS category,\r\n    SUM(splitwise_final.cost_juau) AS cost_juau,\r\n    SUM(splitwise_final.cost_lana) AS cost_lana\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n        AND (splitwise_final.category = 'apenas jo\u00e3o'))\r\nGROUP BY splitwise_final.month , 'apenas jo\u00e3o' , splitwise_final.category \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    'apenas lana' AS `group`,\r\n    splitwise_final.category AS category,\r\n    SUM(splitwise_final.cost_juau) AS cost_juau,\r\n    SUM(splitwise_final.cost_lana) AS cost_lana\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\r\n        AND (splitwise_final.category = 'apenas lana'))\r\nGROUP BY splitwise_final.month , 'apenas lana' , splitwise_final.category\r\nORDER BY month DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "overall_costs"], "unique_id": "model.splitwise.overall_costs", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "overall_costs.sql", "original_file_path": "models\\overall_costs.sql", "name": "overall_costs", "alias": "overall_costs", "checksum": {"name": "sha256", "checksum": "4b4d908a061029cc216a128fdaae3ad40f826da2888c7f6f393008802d401232"}, "tags": [], "refs": [["splitwise_final"], ["splitwise_final"], ["splitwise_final"], ["splitwise_final"], ["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\overall_costs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.445633, "compiled_sql": "\n\nSELECT \n    `splitwise_final`.`month` AS `month`,\n    'nossa resid\u00eancia' AS `group`,\n    splitwise_final.category AS category,\n    SUM(splitwise_final.cost_juau) AS cost_juau,\n    SUM(splitwise_final.cost_lana) AS cost_lana\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n        AND (splitwise_final.category IN ('contas' , 'mercado',\n        'outros',\n        'transporte',\n        'alimenta\u00e7\u00e3o',\n        'feira',\n        'padaria',\n        'assinaturas',\n        'conveniencia',\n        'ganhos',\n        'ganhos extra')))\nGROUP BY 1, 2, 3 \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    'compras' AS `group`,\n    splitwise_final.category AS category,\n    SUM(splitwise_final.cost_juau) AS cost_juau,\n    SUM(splitwise_final.cost_lana) AS cost_lana\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n        AND (splitwise_final.category = 'compras'))\nGROUP BY splitwise_final.month , 'compras' , splitwise_final.category \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    'viagens' AS `group`,\n    splitwise_final.source AS category,\n    SUM(splitwise_final.cost_juau) AS cost_juau,\n    SUM(splitwise_final.cost_lana) AS cost_lana\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    ((splitwise_final.source NOT IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n        AND (splitwise_final.source <> 'Black Mobly'))\nGROUP BY splitwise_final.month , 'viagens' , splitwise_final.source \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    'apenas jo\u00e3o' AS `group`,\n    splitwise_final.category AS category,\n    SUM(splitwise_final.cost_juau) AS cost_juau,\n    SUM(splitwise_final.cost_lana) AS cost_lana\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n        AND (splitwise_final.category = 'apenas jo\u00e3o'))\nGROUP BY splitwise_final.month , 'apenas jo\u00e3o' , splitwise_final.category \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    'apenas lana' AS `group`,\n    splitwise_final.category AS category,\n    SUM(splitwise_final.cost_juau) AS cost_juau,\n    SUM(splitwise_final.cost_lana) AS cost_lana\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    ((splitwise_final.source IN ('Nossa Residencia' , 'VR', 'just me', 'apenas lana'))\n        AND (splitwise_final.category = 'apenas lana'))\nGROUP BY splitwise_final.month , 'apenas lana' , splitwise_final.category\nORDER BY month DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`overall_costs`"}, "model.splitwise.overall_costs_future_estimated": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `sel2`.`month` AS `month`,\r\n    `sel1`.`group` AS `group`,\r\n    `sel1`.`category` AS `category`,\r\n    `sel1`.`cost_juau` AS `cost_juau`,\r\n    `sel1`.`cost_lana` AS `cost_lana`\r\nFROM\r\n    ((SELECT \r\n        `overall_costs`.`group` AS `group`,\r\n            IF(((`overall_costs`.`category` = 'padaria')\r\n                OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) AS `category`,\r\n            (SUM(`overall_costs`.`cost_juau`) / 5) AS `cost_juau`,\r\n            (SUM(`overall_costs`.`cost_lana`) / 5) AS `cost_lana`\r\n    FROM\r\n        {{ref('overall_costs')}}\r\n    WHERE\r\n        ((1 = 1)\r\n            AND (`overall_costs`.`group` <> 'viagens')\r\n            AND (`overall_costs`.`category` NOT IN ('ganhos' , 'ganhos extra'))\r\n            AND (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH))\r\n            AND (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) > (CURDATE() - INTERVAL 6 MONTH)))\r\n    GROUP BY `overall_costs`.`group` , IF(((`overall_costs`.`category` = 'padaria')\r\n        OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos' AS category,\r\n            -(4064.77) AS cost_juau,\r\n            -(3495) AS cost_lana\r\n        UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos extra' AS category,\r\n            -(0) AS cost_juau,\r\n            -(0) AS cost_lana\r\n    ) sel1\r\n    JOIN (SELECT \r\n        some_months.month AS month\r\n    FROM\r\n        {{ref('some_months')}}\r\n    WHERE\r\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \r\nUNION ALL SELECT \r\n    future_expenses.month AS month,\r\n    future_expenses.group AS `group`,\r\n    future_expenses.category AS category,\r\n    future_expenses.cost_juau AS cost_juau,\r\n    future_expenses.cost_lana AS cost_lana\r\nFROM\r\n    bob.future_expenses\r\nWHERE\r\n    (future_expenses.group = 'viagens')\r\n    and future_expenses.month >= substring(curdate(), 1, 7)", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.overall_costs", "model.splitwise.some_months"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "overall_costs_future_estimated"], "unique_id": "model.splitwise.overall_costs_future_estimated", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "overall_costs_future_estimated.sql", "original_file_path": "models\\overall_costs_future_estimated.sql", "name": "overall_costs_future_estimated", "alias": "overall_costs_future_estimated", "checksum": {"name": "sha256", "checksum": "32360f102a734ee887b1a951c154f6f88d5a703fb6d9c4b14407e452bc218b9a"}, "tags": [], "refs": [["overall_costs"], ["some_months"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\overall_costs_future_estimated.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4486308, "compiled_sql": "\n\nSELECT \n    `sel2`.`month` AS `month`,\n    `sel1`.`group` AS `group`,\n    `sel1`.`category` AS `category`,\n    `sel1`.`cost_juau` AS `cost_juau`,\n    `sel1`.`cost_lana` AS `cost_lana`\nFROM\n    ((SELECT \n        `overall_costs`.`group` AS `group`,\n            IF(((`overall_costs`.`category` = 'padaria')\n                OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) AS `category`,\n            (SUM(`overall_costs`.`cost_juau`) / 5) AS `cost_juau`,\n            (SUM(`overall_costs`.`cost_lana`) / 5) AS `cost_lana`\n    FROM\n        `bob`.`overall_costs`\n    WHERE\n        ((1 = 1)\n            AND (`overall_costs`.`group` <> 'viagens')\n            AND (`overall_costs`.`category` NOT IN ('ganhos' , 'ganhos extra'))\n            AND (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH))\n            AND (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) > (CURDATE() - INTERVAL 6 MONTH)))\n    GROUP BY `overall_costs`.`group` , IF(((`overall_costs`.`category` = 'padaria')\n        OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos' AS category,\n            -(4064.77) AS cost_juau,\n            -(3495) AS cost_lana\n        UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos extra' AS category,\n            -(0) AS cost_juau,\n            -(0) AS cost_lana\n    ) sel1\n    JOIN (SELECT \n        some_months.month AS month\n    FROM\n        `bob`.`some_months`\n    WHERE\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \nUNION ALL SELECT \n    future_expenses.month AS month,\n    future_expenses.group AS `group`,\n    future_expenses.category AS category,\n    future_expenses.cost_juau AS cost_juau,\n    future_expenses.cost_lana AS cost_lana\nFROM\n    bob.future_expenses\nWHERE\n    (future_expenses.group = 'viagens')\n    and future_expenses.month >= substring(curdate(), 1, 7)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`overall_costs_future_estimated`"}, "model.splitwise.overall_costs_future_limits": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `sel2`.`month` AS `month`,\r\n    `sel1`.`group` AS `group`,\r\n    `sel1`.`category` AS `category`,\r\n    `sel1`.`cost_juau` AS `cost_juau`,\r\n    `sel1`.`cost_lana` AS `cost_lana`\r\nFROM\r\n    ((SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            limits_final.category AS category,\r\n            limits_final.limit_juau AS cost_juau,\r\n            limits_final.limit_lana AS cost_lana\r\n    FROM\r\n        {{ref('limits_final')}}\r\n    WHERE\r\n        (limits_final.month IN (SELECT \r\n                MAX(limits_final.month)\r\n            FROM\r\n                {{ref('limits_final')}})\r\n            AND (limits_final.category NOT IN ('apenas jo\u00e3o' , 'apenas lana'))) UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos' AS category,\r\n            -(4064.77) AS cost_juau,\r\n            -(3495) AS cost_lana\r\n        UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos extra' AS category,\r\n            -(0) AS cost_juau,\r\n            -(0) AS cost_lana\r\n    ) sel1\r\n    JOIN (SELECT \r\n        some_months.month AS month\r\n    FROM\r\n        {{ref('some_months')}}\r\n    WHERE\r\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \r\nUNION ALL SELECT \r\n    future_expenses.month AS month,\r\n    future_expenses.group AS `group`,\r\n    future_expenses.category AS category,\r\n    future_expenses.cost_juau AS cost_juau,\r\n    future_expenses.cost_lana AS cost_lana\r\nFROM\r\n    bob.future_expenses\r\nWHERE future_expenses.month >= substring(curdate(), 1, 7)\r\nUNION ALL SELECT \r\n    overall_costs.month AS month,\r\n    overall_costs.group AS `group`,\r\n    overall_costs.category AS category,\r\n    overall_costs.cost_juau AS cost_juau,\r\n    overall_costs.cost_lana AS cost_lana\r\nFROM\r\n    {{ref('overall_costs')}}\r\nWHERE\r\n    ((CAST(CONCAT(overall_costs.month, '-01') AS DATE) >= CURDATE())\r\n        AND (overall_costs.group <> 'nossa residencia'))", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.limits_final", "model.splitwise.limits_final", "model.splitwise.some_months", "model.splitwise.overall_costs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "overall_costs_future_limits"], "unique_id": "model.splitwise.overall_costs_future_limits", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "overall_costs_future_limits.sql", "original_file_path": "models\\overall_costs_future_limits.sql", "name": "overall_costs_future_limits", "alias": "overall_costs_future_limits", "checksum": {"name": "sha256", "checksum": "98c5dda44ffe95bec7b2518a56e70fb50acecbf4ff131eb95b34072e35530ea0"}, "tags": [], "refs": [["limits_final"], ["limits_final"], ["some_months"], ["overall_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\overall_costs_future_limits.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4506679, "compiled_sql": "\n\nSELECT \n    `sel2`.`month` AS `month`,\n    `sel1`.`group` AS `group`,\n    `sel1`.`category` AS `category`,\n    `sel1`.`cost_juau` AS `cost_juau`,\n    `sel1`.`cost_lana` AS `cost_lana`\nFROM\n    ((SELECT \n        'nossa resid\u00eancia' AS `group`,\n            limits_final.category AS category,\n            limits_final.limit_juau AS cost_juau,\n            limits_final.limit_lana AS cost_lana\n    FROM\n        `bob`.`limits_final`\n    WHERE\n        (limits_final.month IN (SELECT \n                MAX(limits_final.month)\n            FROM\n                `bob`.`limits_final`)\n            AND (limits_final.category NOT IN ('apenas jo\u00e3o' , 'apenas lana'))) UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos' AS category,\n            -(4064.77) AS cost_juau,\n            -(3495) AS cost_lana\n        UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos extra' AS category,\n            -(0) AS cost_juau,\n            -(0) AS cost_lana\n    ) sel1\n    JOIN (SELECT \n        some_months.month AS month\n    FROM\n        `bob`.`some_months`\n    WHERE\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \nUNION ALL SELECT \n    future_expenses.month AS month,\n    future_expenses.group AS `group`,\n    future_expenses.category AS category,\n    future_expenses.cost_juau AS cost_juau,\n    future_expenses.cost_lana AS cost_lana\nFROM\n    bob.future_expenses\nWHERE future_expenses.month >= substring(curdate(), 1, 7)\nUNION ALL SELECT \n    overall_costs.month AS month,\n    overall_costs.group AS `group`,\n    overall_costs.category AS category,\n    overall_costs.cost_juau AS cost_juau,\n    overall_costs.cost_lana AS cost_lana\nFROM\n    `bob`.`overall_costs`\nWHERE\n    ((CAST(CONCAT(overall_costs.month, '-01') AS DATE) >= CURDATE())\n        AND (overall_costs.group <> 'nossa residencia'))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`overall_costs_future_limits`"}, "model.splitwise.overall_costs_future_planned": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `sel2`.`month` AS `month`,\r\n    `sel1`.`group` AS `group`,\r\n    `sel1`.`category` AS `category`,\r\n    `sel1`.`cost_juau` AS `cost_juau`,\r\n    `sel1`.`cost_lana` AS `cost_lana`\r\nFROM\r\n    ((SELECT \r\n        `overall_costs`.`group` AS `group`,\r\n            IF(((`overall_costs`.`category` = 'padaria')\r\n                OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) AS `category`,\r\n            (SUM(`overall_costs`.`cost_juau`) / 5) AS `cost_juau`,\r\n            (SUM(`overall_costs`.`cost_lana`) / 5) AS `cost_lana`\r\n    FROM\r\n        {{ref('overall_costs')}}\r\n    WHERE\r\n        ((1 = 1)\r\n            AND (`overall_costs`.`group` NOT IN ('viagens' , 'compras', 'apenas jo\u00e3o', 'apenas lana'))\r\n            AND (overall_costs.category NOT IN ('ganhos' , 'ganhos extra'))\r\n            AND (CAST(CONCAT(overall_costs.month, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH))\r\n            AND (CAST(CONCAT(overall_costs.month, '-01') AS DATE) > (CURDATE() - INTERVAL 6 MONTH)))\r\n    GROUP BY overall_costs.group , IF(((overall_costs.category = 'padaria')\r\n        OR (overall_costs.category = 'feira')), 'conveniencia', overall_costs.category) UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos' AS category,\r\n            -(4064.77) AS cost_juau,\r\n            -(3495) AS cost_lana\r\n        UNION ALL SELECT \r\n        'nossa resid\u00eancia' AS `group`,\r\n            'ganhos extra' AS category,\r\n            -(0) AS cost_juau,\r\n            -(0) AS cost_lana\r\n    ) sel1\r\n    JOIN (SELECT \r\n        some_months.month AS month\r\n    FROM\r\n        {{ref('some_months')}}\r\n    WHERE\r\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \r\nUNION ALL SELECT \r\n    future_expenses.month AS month,\r\n    future_expenses.group AS `group`,\r\n    future_expenses.category AS category,\r\n    future_expenses.cost_juau AS cost_juau,\r\n    future_expenses.cost_lana AS cost_lana\r\nFROM\r\n    bob.future_expenses\r\nWHERE future_expenses.month >= substring(curdate(), 1, 7)\r\nUNION ALL SELECT \r\n    overall_costs.month AS month,\r\n    overall_costs.group AS `group`,\r\n    overall_costs.category AS category,\r\n    overall_costs.cost_juau AS cost_juau,\r\n    overall_costs.cost_lana AS cost_lana\r\nFROM\r\n    {{ref('overall_costs')}}\r\nWHERE\r\n    ((CAST(CONCAT(overall_costs.month, '-01') AS DATE) >= CURDATE())\r\n        AND (overall_costs.group <> 'nossa residencia'))", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.overall_costs", "model.splitwise.some_months", "model.splitwise.overall_costs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "overall_costs_future_planned"], "unique_id": "model.splitwise.overall_costs_future_planned", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "overall_costs_future_planned.sql", "original_file_path": "models\\overall_costs_future_planned.sql", "name": "overall_costs_future_planned", "alias": "overall_costs_future_planned", "checksum": {"name": "sha256", "checksum": "3374100321ad2acce19a71da895aa43e9c80bce3a2f5ee8d5d76905f2515152b"}, "tags": [], "refs": [["overall_costs"], ["some_months"], ["overall_costs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\overall_costs_future_planned.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4536302, "compiled_sql": "\n\nSELECT \n    `sel2`.`month` AS `month`,\n    `sel1`.`group` AS `group`,\n    `sel1`.`category` AS `category`,\n    `sel1`.`cost_juau` AS `cost_juau`,\n    `sel1`.`cost_lana` AS `cost_lana`\nFROM\n    ((SELECT \n        `overall_costs`.`group` AS `group`,\n            IF(((`overall_costs`.`category` = 'padaria')\n                OR (`overall_costs`.`category` = 'feira')), 'conveniencia', `overall_costs`.`category`) AS `category`,\n            (SUM(`overall_costs`.`cost_juau`) / 5) AS `cost_juau`,\n            (SUM(`overall_costs`.`cost_lana`) / 5) AS `cost_lana`\n    FROM\n        `bob`.`overall_costs`\n    WHERE\n        ((1 = 1)\n            AND (`overall_costs`.`group` NOT IN ('viagens' , 'compras', 'apenas jo\u00e3o', 'apenas lana'))\n            AND (overall_costs.category NOT IN ('ganhos' , 'ganhos extra'))\n            AND (CAST(CONCAT(overall_costs.month, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH))\n            AND (CAST(CONCAT(overall_costs.month, '-01') AS DATE) > (CURDATE() - INTERVAL 6 MONTH)))\n    GROUP BY overall_costs.group , IF(((overall_costs.category = 'padaria')\n        OR (overall_costs.category = 'feira')), 'conveniencia', overall_costs.category) UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos' AS category,\n            -(4064.77) AS cost_juau,\n            -(3495) AS cost_lana\n        UNION ALL SELECT \n        'nossa resid\u00eancia' AS `group`,\n            'ganhos extra' AS category,\n            -(0) AS cost_juau,\n            -(0) AS cost_lana\n    ) sel1\n    JOIN (SELECT \n        some_months.month AS month\n    FROM\n        `bob`.`some_months`\n    WHERE\n        (CAST(CONCAT(some_months.month, '-01') AS DATE) >= (CURDATE() - INTERVAL 1 MONTH))) sel2) \nUNION ALL SELECT \n    future_expenses.month AS month,\n    future_expenses.group AS `group`,\n    future_expenses.category AS category,\n    future_expenses.cost_juau AS cost_juau,\n    future_expenses.cost_lana AS cost_lana\nFROM\n    bob.future_expenses\nWHERE future_expenses.month >= substring(curdate(), 1, 7)\nUNION ALL SELECT \n    overall_costs.month AS month,\n    overall_costs.group AS `group`,\n    overall_costs.category AS category,\n    overall_costs.cost_juau AS cost_juau,\n    overall_costs.cost_lana AS cost_lana\nFROM\n    `bob`.`overall_costs`\nWHERE\n    ((CAST(CONCAT(overall_costs.month, '-01') AS DATE) >= CURDATE())\n        AND (overall_costs.group <> 'nossa residencia'))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`overall_costs_future_planned`"}, "model.splitwise.overall_forecast": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `overall_costs`.`month` AS `month`,\r\n    `overall_costs`.`group` AS `group`,\r\n    `overall_costs`.`category` AS `category`,\r\n    `overall_costs`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs`.`cost_lana` AS `cost_lana`,\r\n    'future_estimated' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs')}}\r\nWHERE\r\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \r\nUNION ALL SELECT \r\n    `overall_costs_future_estimated`.`month` AS `month`,\r\n    `overall_costs_future_estimated`.`group` AS `group`,\r\n    `overall_costs_future_estimated`.`category` AS `category`,\r\n    `overall_costs_future_estimated`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs_future_estimated`.`cost_lana` AS `cost_lana`,\r\n    'future_estimated' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs_future_estimated')}}\r\nUNION ALL SELECT \r\n    `overall_costs`.`month` AS `month`,\r\n    `overall_costs`.`group` AS `group`,\r\n    `overall_costs`.`category` AS `category`,\r\n    `overall_costs`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs`.`cost_lana` AS `cost_lana`,\r\n    'future_planned' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs')}}\r\nWHERE\r\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \r\nUNION ALL SELECT \r\n    `overall_costs_future_planned`.`month` AS `month`,\r\n    `overall_costs_future_planned`.`group` AS `group`,\r\n    `overall_costs_future_planned`.`category` AS `category`,\r\n    `overall_costs_future_planned`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs_future_planned`.`cost_lana` AS `cost_lana`,\r\n    'future_planned' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs_future_planned')}}\r\nUNION ALL SELECT \r\n    `overall_costs`.`month` AS `month`,\r\n    `overall_costs`.`group` AS `group`,\r\n    `overall_costs`.`category` AS `category`,\r\n    `overall_costs`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs`.`cost_lana` AS `cost_lana`,\r\n    'future_limited' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs')}}\r\nWHERE\r\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \r\nUNION ALL SELECT \r\n    `overall_costs_future_limits`.`month` AS `month`,\r\n    `overall_costs_future_limits`.`group` AS `group`,\r\n    `overall_costs_future_limits`.`category` AS `category`,\r\n    `overall_costs_future_limits`.`cost_juau` AS `cost_juau`,\r\n    `overall_costs_future_limits`.`cost_lana` AS `cost_lana`,\r\n    'future_limited' AS `future_mode`\r\nFROM\r\n    {{ref('overall_costs_future_limits')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.overall_costs", "model.splitwise.overall_costs_future_estimated", "model.splitwise.overall_costs", "model.splitwise.overall_costs_future_planned", "model.splitwise.overall_costs", "model.splitwise.overall_costs_future_limits"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "overall_forecast"], "unique_id": "model.splitwise.overall_forecast", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "overall_forecast.sql", "original_file_path": "models\\overall_forecast.sql", "name": "overall_forecast", "alias": "overall_forecast", "checksum": {"name": "sha256", "checksum": "f896067391aab93c6b295198ac8d536dab673865a6b93da0167950f06f8a5399"}, "tags": [], "refs": [["overall_costs"], ["overall_costs_future_estimated"], ["overall_costs"], ["overall_costs_future_planned"], ["overall_costs"], ["overall_costs_future_limits"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\overall_forecast.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4560332, "compiled_sql": "\n\nSELECT \n    `overall_costs`.`month` AS `month`,\n    `overall_costs`.`group` AS `group`,\n    `overall_costs`.`category` AS `category`,\n    `overall_costs`.`cost_juau` AS `cost_juau`,\n    `overall_costs`.`cost_lana` AS `cost_lana`,\n    'future_estimated' AS `future_mode`\nFROM\n    `bob`.`overall_costs`\nWHERE\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \nUNION ALL SELECT \n    `overall_costs_future_estimated`.`month` AS `month`,\n    `overall_costs_future_estimated`.`group` AS `group`,\n    `overall_costs_future_estimated`.`category` AS `category`,\n    `overall_costs_future_estimated`.`cost_juau` AS `cost_juau`,\n    `overall_costs_future_estimated`.`cost_lana` AS `cost_lana`,\n    'future_estimated' AS `future_mode`\nFROM\n    `bob`.`overall_costs_future_estimated`\nUNION ALL SELECT \n    `overall_costs`.`month` AS `month`,\n    `overall_costs`.`group` AS `group`,\n    `overall_costs`.`category` AS `category`,\n    `overall_costs`.`cost_juau` AS `cost_juau`,\n    `overall_costs`.`cost_lana` AS `cost_lana`,\n    'future_planned' AS `future_mode`\nFROM\n    `bob`.`overall_costs`\nWHERE\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \nUNION ALL SELECT \n    `overall_costs_future_planned`.`month` AS `month`,\n    `overall_costs_future_planned`.`group` AS `group`,\n    `overall_costs_future_planned`.`category` AS `category`,\n    `overall_costs_future_planned`.`cost_juau` AS `cost_juau`,\n    `overall_costs_future_planned`.`cost_lana` AS `cost_lana`,\n    'future_planned' AS `future_mode`\nFROM\n    `bob`.`overall_costs_future_planned`\nUNION ALL SELECT \n    `overall_costs`.`month` AS `month`,\n    `overall_costs`.`group` AS `group`,\n    `overall_costs`.`category` AS `category`,\n    `overall_costs`.`cost_juau` AS `cost_juau`,\n    `overall_costs`.`cost_lana` AS `cost_lana`,\n    'future_limited' AS `future_mode`\nFROM\n    `bob`.`overall_costs`\nWHERE\n    (CAST(CONCAT(`overall_costs`.`month`, '-01') AS DATE) <= (CURDATE() - INTERVAL 1 MONTH)) \nUNION ALL SELECT \n    `overall_costs_future_limits`.`month` AS `month`,\n    `overall_costs_future_limits`.`group` AS `group`,\n    `overall_costs_future_limits`.`category` AS `category`,\n    `overall_costs_future_limits`.`cost_juau` AS `cost_juau`,\n    `overall_costs_future_limits`.`cost_lana` AS `cost_lana`,\n    'future_limited' AS `future_mode`\nFROM\n    `bob`.`overall_costs_future_limits`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`overall_forecast`"}, "model.splitwise.savings_final": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `splitwise_final`.`month` AS `month`,\r\n    `splitwise_final`.`source` AS `source`,\r\n    (SUM(IF((`splitwise_final`.`category` IN ('ganhos' , 'ganhos extra')),\r\n        `splitwise_final`.`cost_juau`,\r\n        0)) * -(1)) AS `total_earning`,\r\n    (SUM(IF((`splitwise_final`.`category` NOT IN ('ganhos' , 'ganhos extra')),\r\n        `splitwise_final`.`cost_juau`,\r\n        0)) * -(1)) AS `cost`,\r\n    (SUM(`splitwise_final`.`cost_juau`) * -(1)) AS `balance`,\r\n    'ganhos + ganhos extra' AS `earning_category`,\r\n    'jo\u00e3o' AS cost_by\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    (splitwise_final.source <> 'Black Mobly')\r\nGROUP BY splitwise_final.month , splitwise_final.source \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    splitwise_final.source AS source,\r\n    (SUM(IF((splitwise_final.category = 'ganhos'),\r\n        splitwise_final.cost_juau,\r\n        0)) * -(1)) AS total_earning,\r\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\r\n        splitwise_final.cost_juau,\r\n        0)) * -(1)) AS cost,\r\n    (SUM(IF((splitwise_final.category <> 'ganhos extra'),\r\n        splitwise_final.cost_juau,\r\n        0)) * -(1)) AS balance,\r\n    'ganhos' AS earning_category,\r\n    'jo\u00e3o' AS cost_by\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    (splitwise_final.source <> 'Black Mobly')\r\nGROUP BY splitwise_final.month , splitwise_final.source \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    splitwise_final.source AS source,\r\n    (SUM(IF((splitwise_final.category IN ('ganhos' , 'ganhos extra')),\r\n        splitwise_final.cost_lana,\r\n        0)) * -(1)) AS total_earning,\r\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\r\n        splitwise_final.cost_lana,\r\n        0)) * -(1)) AS cost,\r\n    (SUM(splitwise_final.cost_lana) * -(1)) AS balance,\r\n    'ganhos + ganhos extra' AS earning_category,\r\n    'lana' AS cost_by\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    (splitwise_final.source <> 'Black Mobly')\r\nGROUP BY splitwise_final.month , splitwise_final.source \r\nUNION ALL SELECT \r\n    splitwise_final.month AS month,\r\n    splitwise_final.source AS source,\r\n    (SUM(IF((splitwise_final.category = 'ganhos'),\r\n        splitwise_final.cost_lana,\r\n        0)) * -(1)) AS total_earning,\r\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\r\n        splitwise_final.cost_lana,\r\n        0)) * -(1)) AS cost,\r\n    (SUM(IF((splitwise_final.category <> 'ganhos extra'),\r\n        splitwise_final.cost_lana,\r\n        0)) * -(1)) AS balance,\r\n    'ganhos' AS earning_category,\r\n    'lana' AS cost_by\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nWHERE\r\n    (splitwise_final.source <> 'Black Mobly')\r\nGROUP BY splitwise_final.month , splitwise_final.source", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "savings_final"], "unique_id": "model.splitwise.savings_final", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "savings_final.sql", "original_file_path": "models\\savings_final.sql", "name": "savings_final", "alias": "savings_final", "checksum": {"name": "sha256", "checksum": "e622ddbe92383772516eaae93f056aa150564ee70fa60f1780ae4ff6b94c15d1"}, "tags": [], "refs": [["splitwise_final"], ["splitwise_final"], ["splitwise_final"], ["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\savings_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4580333, "compiled_sql": "\n\nSELECT \n    `splitwise_final`.`month` AS `month`,\n    `splitwise_final`.`source` AS `source`,\n    (SUM(IF((`splitwise_final`.`category` IN ('ganhos' , 'ganhos extra')),\n        `splitwise_final`.`cost_juau`,\n        0)) * -(1)) AS `total_earning`,\n    (SUM(IF((`splitwise_final`.`category` NOT IN ('ganhos' , 'ganhos extra')),\n        `splitwise_final`.`cost_juau`,\n        0)) * -(1)) AS `cost`,\n    (SUM(`splitwise_final`.`cost_juau`) * -(1)) AS `balance`,\n    'ganhos + ganhos extra' AS `earning_category`,\n    'jo\u00e3o' AS cost_by\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    (splitwise_final.source <> 'Black Mobly')\nGROUP BY splitwise_final.month , splitwise_final.source \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    splitwise_final.source AS source,\n    (SUM(IF((splitwise_final.category = 'ganhos'),\n        splitwise_final.cost_juau,\n        0)) * -(1)) AS total_earning,\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\n        splitwise_final.cost_juau,\n        0)) * -(1)) AS cost,\n    (SUM(IF((splitwise_final.category <> 'ganhos extra'),\n        splitwise_final.cost_juau,\n        0)) * -(1)) AS balance,\n    'ganhos' AS earning_category,\n    'jo\u00e3o' AS cost_by\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    (splitwise_final.source <> 'Black Mobly')\nGROUP BY splitwise_final.month , splitwise_final.source \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    splitwise_final.source AS source,\n    (SUM(IF((splitwise_final.category IN ('ganhos' , 'ganhos extra')),\n        splitwise_final.cost_lana,\n        0)) * -(1)) AS total_earning,\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\n        splitwise_final.cost_lana,\n        0)) * -(1)) AS cost,\n    (SUM(splitwise_final.cost_lana) * -(1)) AS balance,\n    'ganhos + ganhos extra' AS earning_category,\n    'lana' AS cost_by\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    (splitwise_final.source <> 'Black Mobly')\nGROUP BY splitwise_final.month , splitwise_final.source \nUNION ALL SELECT \n    splitwise_final.month AS month,\n    splitwise_final.source AS source,\n    (SUM(IF((splitwise_final.category = 'ganhos'),\n        splitwise_final.cost_lana,\n        0)) * -(1)) AS total_earning,\n    (SUM(IF((splitwise_final.category NOT IN ('ganhos' , 'ganhos extra')),\n        splitwise_final.cost_lana,\n        0)) * -(1)) AS cost,\n    (SUM(IF((splitwise_final.category <> 'ganhos extra'),\n        splitwise_final.cost_lana,\n        0)) * -(1)) AS balance,\n    'ganhos' AS earning_category,\n    'lana' AS cost_by\nFROM\n    `bob`.`splitwise_final`\nWHERE\n    (splitwise_final.source <> 'Black Mobly')\nGROUP BY splitwise_final.month , splitwise_final.source", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`savings_final`"}, "model.splitwise.some_months": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT '2022-08' AS `month` \r\nUNION ALL SELECT '2022-09' AS `month` \r\nUNION ALL SELECT '2022-10' AS `month` \r\nUNION ALL SELECT '2022-11' AS `month` \r\nUNION ALL SELECT '2022-12' AS `month` \r\nUNION ALL SELECT '2023-01' AS `month` \r\nUNION ALL SELECT '2023-02' AS `month` \r\nUNION ALL SELECT '2023-03' AS `month` \r\nUNION ALL SELECT '2023-04' AS `month` \r\nUNION ALL SELECT '2023-05' AS `month` \r\nUNION ALL SELECT '2023-06' AS `month` \r\nUNION ALL SELECT '2023-07' AS `month` \r\nUNION ALL SELECT '2023-08' AS `month` \r\nUNION ALL SELECT '2023-09' AS `month` \r\nUNION ALL SELECT '2023-10' AS `month` \r\nUNION ALL SELECT '2023-11' AS `month` \r\nUNION ALL SELECT '2023-12' AS `month`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "some_months"], "unique_id": "model.splitwise.some_months", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "some_months.sql", "original_file_path": "models\\some_months.sql", "name": "some_months", "alias": "some_months", "checksum": {"name": "sha256", "checksum": "62906b7e65b92fba53596a5c6eec65a920a42ca355dea3b4d111c26a00e6bb2a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\some_months.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.462033, "compiled_sql": "\n\nSELECT '2022-08' AS `month` \nUNION ALL SELECT '2022-09' AS `month` \nUNION ALL SELECT '2022-10' AS `month` \nUNION ALL SELECT '2022-11' AS `month` \nUNION ALL SELECT '2022-12' AS `month` \nUNION ALL SELECT '2023-01' AS `month` \nUNION ALL SELECT '2023-02' AS `month` \nUNION ALL SELECT '2023-03' AS `month` \nUNION ALL SELECT '2023-04' AS `month` \nUNION ALL SELECT '2023-05' AS `month` \nUNION ALL SELECT '2023-06' AS `month` \nUNION ALL SELECT '2023-07' AS `month` \nUNION ALL SELECT '2023-08' AS `month` \nUNION ALL SELECT '2023-09' AS `month` \nUNION ALL SELECT '2023-10' AS `month` \nUNION ALL SELECT '2023-11' AS `month` \nUNION ALL SELECT '2023-12' AS `month`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`some_months`"}, "model.splitwise.splitwise_final": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `sel`.`expense_id` AS `expense_id`,\r\n    trim(`sel`.`category`) AS `category`,\r\n    trim(`sel`.`name`) AS `name`,\r\n    `sel`.`cost` AS `cost`,\r\n    `sel`.`cost_juau` AS `cost_juau`,\r\n    `sel`.`cost_lana` AS `cost_lana`,\r\n    `sel`.`month` AS `month`,\r\n    `sel`.`created_at` AS `created_at`,\r\n    `sel`.`updated_at` AS `updated_at`,\r\n    `sel`.`created_by` AS `created_by`,\r\n    trim(`sel`.`source`) AS `source`,\r\n    ((`sel`.`cost_juau` / (`sel`.`cost_juau` + `sel`.`cost_lana`)) * 100) AS `percentage_juau`,\r\n    ((`sel`.`cost_lana` / (`sel`.`cost_juau` + `sel`.`cost_lana`)) * 100) AS `percentage_lana`,\r\n    if(repayments_from = 'None', null, repayments_from) as repayments_from,\r\n    if(repayments_to = 'None', null, repayments_to) as repayments_to\r\nFROM\r\n    (SELECT \r\n        `s`.`expense_id` AS `expense_id`,\r\n            (CASE\r\n                WHEN\r\n                    ((`s`.`name` = 'None')\r\n                        AND (`s`.`source` <> 'just me')\r\n                        AND (`s`.`source` <> 'apenas lana'))\r\n                THEN\r\n                    'None'\r\n                WHEN\r\n                    ((`s`.`name` = 'None')\r\n                        AND (`s`.`source` = 'just me'))\r\n                THEN\r\n                    'apenas jo\u00e3o'\r\n                WHEN\r\n                    ((s.name = 'None')\r\n                        AND (s.source = 'apenas lana'))\r\n                THEN\r\n                    'apenas lana'\r\n                ELSE s.category\r\n            END) AS category,\r\n            (CASE\r\n                WHEN (s.name = 'None') THEN s.category\r\n                ELSE s.name\r\n            END) AS name,\r\n            (CASE\r\n                WHEN\r\n                    (((s.source IN ('just me' , 'Black Mobly'))\r\n                        AND (s.category = 'ganhos'))\r\n                        OR (s.category = 'ganhos extra'))\r\n                THEN\r\n                    -(s.cost)\r\n                WHEN\r\n                    (((s.source = 'apenas lana')\r\n                        AND (s.category = 'ganhos'))\r\n                        OR (s.category = 'ganhos extra'))\r\n                THEN\r\n                    -(s.cost)\r\n                ELSE s.cost\r\n            END) AS cost,\r\n            (CASE\r\n                WHEN (s.source = 'apenas lana') THEN 0\r\n                WHEN\r\n                    (((s.source IN ('just me' , 'Black Mobly'))\r\n                        AND (s.category = 'ganhos'))\r\n                        OR (s.category = 'ganhos extra'))\r\n                THEN\r\n                    -(s.cost)\r\n                WHEN\r\n                    ((s.source IN ('just me' , 'Black Mobly'))\r\n                        AND (s.category <> 'ganhos')\r\n                        AND (s.category <> 'ganhos extra'))\r\n                THEN\r\n                    s.cost\r\n                WHEN\r\n                    ((s.source = 'VR')\r\n                        AND (s.repayments_from = 'Hallana'))\r\n                THEN\r\n                    s.cost\r\n                WHEN\r\n                    ((s.source = 'VR')\r\n                        AND (s.repayments_from = 'Jo\u00e3o'))\r\n                THEN\r\n                    0\r\n                WHEN (`s`.repayments_from = 'Hallana') THEN (`s`.cost - `s`.repayments)\r\n                ELSE `s`.repayments\r\n            END) AS cost_juau,\r\n            (CASE\r\n                WHEN (`s`.source IN ('just me' , 'Black Mobly')) THEN 0\r\n                WHEN\r\n                    (((`s`.source = 'apenas lana')\r\n                        AND (`s`.category = 'ganhos'))\r\n                        OR (`s`.category = 'ganhos extra'))\r\n                THEN\r\n                    -(`s`.cost)\r\n                WHEN\r\n                    ((`s`.source = 'apenas lana')\r\n                        AND (`s`.category <> 'ganhos')\r\n                        AND (`s`.category <> 'ganhos extra'))\r\n                THEN\r\n                    `s`.cost\r\n                WHEN\r\n                    ((`s`.source = 'VR')\r\n                        AND (`s`.repayments_from = 'Jo\u00e3o'))\r\n                THEN\r\n                    s.cost\r\n                WHEN\r\n                    ((s.source = 'VR')\r\n                        AND (s.repayments_from = 'Hallana'))\r\n                THEN\r\n                    0\r\n                WHEN (s.repayments_from = 'Jo\u00e3o') THEN (s.cost - s.repayments)\r\n                ELSE s.repayments\r\n            END) AS cost_lana,\r\n            IF(((s.details IS NOT NULL)\r\n                AND (s.details <> 'None')), substring(s.details, 1, 7), s.month) AS month,\r\n            s.created_at AS created_at,\r\n            s.updated_at AS updated_at,\r\n            s.created_by AS created_by,\r\n            s.source AS source,\r\n            s.repayments_from,\r\n            s.repayments_to\r\n    FROM\r\n        bob.splitwise s\r\n    WHERE\r\n        ((s.deleted_by = 'None')\r\n            AND (s.category <> 'Dinheiro extra pai juau')\r\n            AND (s.category <> 'Payment')\r\n            AND (s.category <> 'QUITE')\r\n            AND (s.month <> 'old')\r\n            AND (s.expense_id NOT IN ('1982325837' , '2374550198', '2374528360', '2420271153', '2420307343'))\r\n            AND (s.category NOT IN ('ganhos' , 'ganhos extra')))\r\n    HAVING name NOT LIKE '%FILTRAR'\r\n    ORDER BY s.expense_id DESC) sel \r\n\r\nUNION ALL \r\n\r\nSELECT \r\n    earnings_final.expense_id AS expense_id,\r\n    earnings_final.category AS category,\r\n    earnings_final.name AS name,\r\n    earnings_final.cost AS cost,\r\n    earnings_final.cost_juau AS cost_juau,\r\n    earnings_final.cost_lana AS cost_lana,\r\n    earnings_final.month AS month,\r\n    earnings_final.created_at AS created_at,\r\n    earnings_final.updated_at AS updated_at,\r\n    earnings_final.created_by AS created_by,\r\n    earnings_final.source AS source,\r\n    earnings_final.percentage_juau AS percentage_juau,\r\n    earnings_final.percentage_lana AS percentage_lana,\r\n    null as repayments_from,\r\n    null as repayments_to\r\nFROM\r\n    {{ref('earnings_final')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.earnings_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "splitwise_final"], "unique_id": "model.splitwise.splitwise_final", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "splitwise_final.sql", "original_file_path": "models\\splitwise_final.sql", "name": "splitwise_final", "alias": "splitwise_final", "checksum": {"name": "sha256", "checksum": "94e4fcd9e740db81fce02b44f8febccd378e2d8a87e7748a736878d5df6b5ed0"}, "tags": [], "refs": [["earnings_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\splitwise_final.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4640331, "compiled_sql": "\n\nSELECT \n    `sel`.`expense_id` AS `expense_id`,\n    trim(`sel`.`category`) AS `category`,\n    trim(`sel`.`name`) AS `name`,\n    `sel`.`cost` AS `cost`,\n    `sel`.`cost_juau` AS `cost_juau`,\n    `sel`.`cost_lana` AS `cost_lana`,\n    `sel`.`month` AS `month`,\n    `sel`.`created_at` AS `created_at`,\n    `sel`.`updated_at` AS `updated_at`,\n    `sel`.`created_by` AS `created_by`,\n    trim(`sel`.`source`) AS `source`,\n    ((`sel`.`cost_juau` / (`sel`.`cost_juau` + `sel`.`cost_lana`)) * 100) AS `percentage_juau`,\n    ((`sel`.`cost_lana` / (`sel`.`cost_juau` + `sel`.`cost_lana`)) * 100) AS `percentage_lana`,\n    if(repayments_from = 'None', null, repayments_from) as repayments_from,\n    if(repayments_to = 'None', null, repayments_to) as repayments_to\nFROM\n    (SELECT \n        `s`.`expense_id` AS `expense_id`,\n            (CASE\n                WHEN\n                    ((`s`.`name` = 'None')\n                        AND (`s`.`source` <> 'just me')\n                        AND (`s`.`source` <> 'apenas lana'))\n                THEN\n                    'None'\n                WHEN\n                    ((`s`.`name` = 'None')\n                        AND (`s`.`source` = 'just me'))\n                THEN\n                    'apenas jo\u00e3o'\n                WHEN\n                    ((s.name = 'None')\n                        AND (s.source = 'apenas lana'))\n                THEN\n                    'apenas lana'\n                ELSE s.category\n            END) AS category,\n            (CASE\n                WHEN (s.name = 'None') THEN s.category\n                ELSE s.name\n            END) AS name,\n            (CASE\n                WHEN\n                    (((s.source IN ('just me' , 'Black Mobly'))\n                        AND (s.category = 'ganhos'))\n                        OR (s.category = 'ganhos extra'))\n                THEN\n                    -(s.cost)\n                WHEN\n                    (((s.source = 'apenas lana')\n                        AND (s.category = 'ganhos'))\n                        OR (s.category = 'ganhos extra'))\n                THEN\n                    -(s.cost)\n                ELSE s.cost\n            END) AS cost,\n            (CASE\n                WHEN (s.source = 'apenas lana') THEN 0\n                WHEN\n                    (((s.source IN ('just me' , 'Black Mobly'))\n                        AND (s.category = 'ganhos'))\n                        OR (s.category = 'ganhos extra'))\n                THEN\n                    -(s.cost)\n                WHEN\n                    ((s.source IN ('just me' , 'Black Mobly'))\n                        AND (s.category <> 'ganhos')\n                        AND (s.category <> 'ganhos extra'))\n                THEN\n                    s.cost\n                WHEN\n                    ((s.source = 'VR')\n                        AND (s.repayments_from = 'Hallana'))\n                THEN\n                    s.cost\n                WHEN\n                    ((s.source = 'VR')\n                        AND (s.repayments_from = 'Jo\u00e3o'))\n                THEN\n                    0\n                WHEN (`s`.repayments_from = 'Hallana') THEN (`s`.cost - `s`.repayments)\n                ELSE `s`.repayments\n            END) AS cost_juau,\n            (CASE\n                WHEN (`s`.source IN ('just me' , 'Black Mobly')) THEN 0\n                WHEN\n                    (((`s`.source = 'apenas lana')\n                        AND (`s`.category = 'ganhos'))\n                        OR (`s`.category = 'ganhos extra'))\n                THEN\n                    -(`s`.cost)\n                WHEN\n                    ((`s`.source = 'apenas lana')\n                        AND (`s`.category <> 'ganhos')\n                        AND (`s`.category <> 'ganhos extra'))\n                THEN\n                    `s`.cost\n                WHEN\n                    ((`s`.source = 'VR')\n                        AND (`s`.repayments_from = 'Jo\u00e3o'))\n                THEN\n                    s.cost\n                WHEN\n                    ((s.source = 'VR')\n                        AND (s.repayments_from = 'Hallana'))\n                THEN\n                    0\n                WHEN (s.repayments_from = 'Jo\u00e3o') THEN (s.cost - s.repayments)\n                ELSE s.repayments\n            END) AS cost_lana,\n            IF(((s.details IS NOT NULL)\n                AND (s.details <> 'None')), substring(s.details, 1, 7), s.month) AS month,\n            s.created_at AS created_at,\n            s.updated_at AS updated_at,\n            s.created_by AS created_by,\n            s.source AS source,\n            s.repayments_from,\n            s.repayments_to\n    FROM\n        bob.splitwise s\n    WHERE\n        ((s.deleted_by = 'None')\n            AND (s.category <> 'Dinheiro extra pai juau')\n            AND (s.category <> 'Payment')\n            AND (s.category <> 'QUITE')\n            AND (s.month <> 'old')\n            AND (s.expense_id NOT IN ('1982325837' , '2374550198', '2374528360', '2420271153', '2420307343'))\n            AND (s.category NOT IN ('ganhos' , 'ganhos extra')))\n    HAVING name NOT LIKE '%FILTRAR'\n    ORDER BY s.expense_id DESC) sel \n\nUNION ALL \n\nSELECT \n    earnings_final.expense_id AS expense_id,\n    earnings_final.category AS category,\n    earnings_final.name AS name,\n    earnings_final.cost AS cost,\n    earnings_final.cost_juau AS cost_juau,\n    earnings_final.cost_lana AS cost_lana,\n    earnings_final.month AS month,\n    earnings_final.created_at AS created_at,\n    earnings_final.updated_at AS updated_at,\n    earnings_final.created_by AS created_by,\n    earnings_final.source AS source,\n    earnings_final.percentage_juau AS percentage_juau,\n    earnings_final.percentage_lana AS percentage_lana,\n    null as repayments_from,\n    null as repayments_to\nFROM\n    `bob`.`earnings_final`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`splitwise_final`"}, "model.splitwise.year_month": {"raw_sql": "{{ config(materialized='view') }}\r\n\r\nSELECT \r\n    `splitwise_final`.`month` AS `year_month`\r\nFROM\r\n    {{ref('splitwise_final')}}\r\nGROUP BY `splitwise_final`.`month`\r\nORDER BY `splitwise_final`.`month` DESC", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.splitwise.splitwise_final"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": null, "schema": "bob", "fqn": ["splitwise", "year_month"], "unique_id": "model.splitwise.year_month", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "year_month.sql", "original_file_path": "models\\year_month.sql", "name": "year_month", "alias": "year_month", "checksum": {"name": "sha256", "checksum": "551dc1660c8892ccddf1cf048ca91f67003ef1cce9efd104856b800455c275b6"}, "tags": [], "refs": [["splitwise_final"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\splitwise\\models\\year_month.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1694001620.4670334, "compiled_sql": "\n\nSELECT \n    `splitwise_final`.`month` AS `year_month`\nFROM\n    `bob`.`splitwise_final`\nGROUP BY `splitwise_final`.`month`\nORDER BY `splitwise_final`.`month` DESC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`bob`.`year_month`"}, "test.splitwise.unique_my_first_dbt_model_id.16e066b321": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": null, "schema": "bob_dbt_test__audit", "fqn": ["splitwise", "unique_my_first_dbt_model_id"], "unique_id": "test.splitwise.unique_my_first_dbt_model_id.16e066b321", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "unique_my_first_dbt_model_id.sql", "original_file_path": "models\\schema.yml", "name": "unique_my_first_dbt_model_id", "alias": "unique_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694001620.5070355, "column_name": "id", "file_key_name": "models.my_first_dbt_model"}, "test.splitwise.not_null_my_first_dbt_model_id.5fb22c2710": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_first_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": null, "schema": "bob_dbt_test__audit", "fqn": ["splitwise", "not_null_my_first_dbt_model_id"], "unique_id": "test.splitwise.not_null_my_first_dbt_model_id.5fb22c2710", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "not_null_my_first_dbt_model_id.sql", "original_file_path": "models\\schema.yml", "name": "not_null_my_first_dbt_model_id", "alias": "not_null_my_first_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_first_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694001620.5090358, "column_name": "id", "file_key_name": "models.my_first_dbt_model"}, "test.splitwise.unique_my_second_dbt_model_id.57a0f8c493": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": null, "schema": "bob_dbt_test__audit", "fqn": ["splitwise", "unique_my_second_dbt_model_id"], "unique_id": "test.splitwise.unique_my_second_dbt_model_id.57a0f8c493", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "unique_my_second_dbt_model_id.sql", "original_file_path": "models\\schema.yml", "name": "unique_my_second_dbt_model_id", "alias": "unique_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_second_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694001620.5119996, "column_name": "id", "file_key_name": "models.my_second_dbt_model"}, "test.splitwise.not_null_my_second_dbt_model_id.151b76d778": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{{ get_where_subquery(ref('my_second_dbt_model')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": null, "schema": "bob_dbt_test__audit", "fqn": ["splitwise", "not_null_my_second_dbt_model_id"], "unique_id": "test.splitwise.not_null_my_second_dbt_model_id.151b76d778", "package_name": "splitwise", "root_path": "C:\\Users\\ocamp\\Desktop\\splitwise_dbt\\splitwise", "path": "not_null_my_second_dbt_model_id.sql", "original_file_path": "models\\schema.yml", "name": "not_null_my_second_dbt_model_id", "alias": "not_null_my_second_dbt_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["my_second_dbt_model"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1694001620.5150325, "column_name": "id", "file_key_name": "models.my_second_dbt_model"}}, "sources": {}, "macros": {"macro.dbt_mysql.mysql__list_schemas": {"unique_id": "macro.dbt_mysql.mysql__list_schemas", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__list_schemas", "macro_sql": "{% macro mysql__list_schemas(database) %}\n    {% call statement('list_schemas', fetch_result=True, auto_begin=False) -%}\n        select distinct schema_name\n        from information_schema.schemata\n    {%- endcall %}\n\n    {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.875006}, "macro.dbt_mysql.mysql__create_schema": {"unique_id": "macro.dbt_mysql.mysql__create_schema", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__create_schema", "macro_sql": "{% macro mysql__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8760047}, "macro.dbt_mysql.mysql__drop_schema": {"unique_id": "macro.dbt_mysql.mysql__drop_schema", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__drop_schema", "macro_sql": "{% macro mysql__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8770058}, "macro.dbt_mysql.mysql__drop_relation": {"unique_id": "macro.dbt_mysql.mysql__drop_relation", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__drop_relation", "macro_sql": "{% macro mysql__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        drop {{ relation.type }} if exists {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8780124}, "macro.dbt_mysql.mysql__truncate_relation": {"unique_id": "macro.dbt_mysql.mysql__truncate_relation", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__truncate_relation", "macro_sql": "{% macro mysql__truncate_relation(relation) -%}\n    {% call statement('truncate_relation') -%}\n      truncate table {{ relation }}\n    {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8780124}, "macro.dbt_mysql.mysql__create_table_as": {"unique_id": "macro.dbt_mysql.mysql__create_table_as", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__create_table_as", "macro_sql": "{% macro mysql__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=False) }}\n  as (\n    {{ sql }}\n  )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8790064}, "macro.dbt_mysql.mysql__current_timestamp": {"unique_id": "macro.dbt_mysql.mysql__current_timestamp", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__current_timestamp", "macro_sql": "{% macro mysql__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8790064}, "macro.dbt_mysql.mysql__rename_relation": {"unique_id": "macro.dbt_mysql.mysql__rename_relation", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__rename_relation", "macro_sql": "{% macro mysql__rename_relation(from_relation, to_relation) -%}\n  {#\n    MySQL rename fails when the relation already exists, so a 2-step process is needed:\n    1. Drop the existing relation\n    2. Rename the new relation to existing relation\n  #}\n  {% call statement('drop_relation') %}\n    drop {{ to_relation.type }} if exists {{ to_relation }} cascade\n  {% endcall %}\n  {% call statement('rename_relation') %}\n    rename table {{ from_relation }} to {{ to_relation }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8800044}, "macro.dbt_mysql.mysql__check_schema_exists": {"unique_id": "macro.dbt_mysql.mysql__check_schema_exists", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__check_schema_exists", "macro_sql": "{% macro mysql__check_schema_exists(database, schema) -%}\n    {# no-op #}\n    {# see MySQLAdapter.check_schema_exists() #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8800044}, "macro.dbt_mysql.mysql__get_columns_in_relation": {"unique_id": "macro.dbt_mysql.mysql__get_columns_in_relation", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__get_columns_in_relation", "macro_sql": "{% macro mysql__get_columns_in_relation(relation) -%}\n    {% call statement('get_columns_in_relation', fetch_result=True) %}\n        show columns from {{ relation.schema }}.{{ relation.identifier }}\n    {% endcall %}\n\n    {% set table = load_result('get_columns_in_relation').table %}\n    {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.881005}, "macro.dbt_mysql.mysql__list_relations_without_caching": {"unique_id": "macro.dbt_mysql.mysql__list_relations_without_caching", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__list_relations_without_caching", "macro_sql": "{% macro mysql__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      null as \"database\",\n      table_name as name,\n      table_schema as \"schema\",\n      case when table_type = 'BASE TABLE' then 'table'\n           when table_type = 'VIEW' then 'view'\n           else table_type\n      end as table_type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8820043}, "macro.dbt_mysql.mysql__generate_database_name": {"unique_id": "macro.dbt_mysql.mysql__generate_database_name", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "mysql__generate_database_name", "macro_sql": "{% macro mysql__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8820043}, "macro.dbt_mysql.mysql__get_catalog": {"unique_id": "macro.dbt_mysql.mysql__get_catalog", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "mysql__get_catalog", "macro_sql": "{% macro mysql__get_catalog(information_schema, schemas) -%}\n    {%- call statement('catalog', fetch_result=True) -%}\n    with tables as (\n\n        select\n            null as \"table_database\",\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case when table_type = 'BASE TABLE' then 'table'\n                 when table_type = 'VIEW' then 'view'\n                 else table_type\n            end as \"table_type\",\n            null as \"table_owner\"\n\n        from {{ information_schema }}.tables\n\n    ),\n\n    columns as (\n\n        select\n            null as \"table_database\",\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            null as \"table_comment\",\n\n            column_name as \"column_name\",\n            ordinal_position as \"column_index\",\n            data_type as \"column_type\",\n            null as \"column_comment\"\n\n        from {{ information_schema }}.columns\n\n    )\n\n    select\n        columns.table_database,\n        columns.table_schema,\n        columns.table_name,\n        tables.table_type,\n        columns.table_comment,\n        tables.table_owner,\n        columns.column_name,\n        columns.column_index,\n        columns.column_type,\n        columns.column_comment\n    from tables\n    join columns using (table_schema, table_name)\n    where table_schema not in ('information_schema', 'performance_schema', 'mysql', 'sys')\n    and (\n    {%- for schema in schemas -%}\n      upper(table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    )\n    order by column_index\n    {%- endcall -%}\n\n    {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8840039}, "macro.dbt_mysql.incremental_delete": {"unique_id": "macro.dbt_mysql.incremental_delete", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_delete", "macro_sql": "{% macro incremental_delete(tmp_relation, target_relation, unique_key=none, statement_name=\"pre_main\") %}\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8850052}, "macro.dbt_mysql.incremental_insert": {"unique_id": "macro.dbt_mysql.incremental_insert", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\incremental\\helpers.sql", "original_file_path": "macros\\materializations\\incremental\\helpers.sql", "name": "incremental_insert", "macro_sql": "{% macro incremental_insert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8860044}, "macro.dbt_mysql.materialization_incremental_mysql": {"unique_id": "macro.dbt_mysql.materialization_incremental_mysql", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\incremental\\incremental.sql", "name": "materialization_incremental_mysql", "macro_sql": "{% materialization incremental, adapter='mysql' %}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_delete(tmp_relation, target_relation, unique_key=unique_key, statement_name=\"pre_main\") %}\n      {% call statement(\"pre_main\") %}\n          {{ build_sql }}\n      {% endcall %}\n      {% set build_sql = incremental_insert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.run_query", "macro.dbt_mysql.incremental_delete", "macro.dbt.statement", "macro.dbt_mysql.incremental_insert", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8920054}, "macro.dbt_mysql.basic_load_csv_rows": {"unique_id": "macro.dbt_mysql.basic_load_csv_rows", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\seed\\seed.sql", "original_file_path": "macros\\materializations\\seed\\seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.8990064}, "macro.dbt_mysql.mysql__snapshot_string_as_time": {"unique_id": "macro.dbt_mysql.mysql__snapshot_string_as_time", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "mysql__snapshot_string_as_time", "macro_sql": "{% macro mysql__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"str_to_date('\" ~ timestamp ~ \"', '%Y-%m-%d %T')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9060051}, "macro.dbt_mysql.materialization_snapshot_mysql": {"unique_id": "macro.dbt_mysql.materialization_snapshot_mysql", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "materialization_snapshot_mysql", "macro_sql": "{% materialization snapshot, adapter='mysql' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n      {% call statement('main') %}\n          {{ final_sql }}\n      {% endcall %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      -- MySQL does not support the MERGE statement, so we need to use seperate UPDATE + INSERT statements instead\n      {% set final_sql_update = mysql__snapshot_merge_sql_update(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% set final_sql_insert = mysql__snapshot_merge_sql_insert(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n      {% call statement('main') %}\n          {{ final_sql_update }}\n      {% endcall %}\n\n      {% call statement('main') %}\n          {{ final_sql_insert }}\n      {% endcall %}\n\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt_mysql.mysql__snapshot_merge_sql_update", "macro.dbt_mysql.mysql__snapshot_merge_sql_insert", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9140038}, "macro.dbt_mysql.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt_mysql.snapshot_check_all_get_existing_columns", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=None, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.916004}, "macro.dbt_mysql.mysql__snapshot_merge_sql_update": {"unique_id": "macro.dbt_mysql.mysql__snapshot_merge_sql_update", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "mysql__snapshot_merge_sql_update", "macro_sql": "{% macro mysql__snapshot_merge_sql_update(target, source, insert_cols) -%}\n    update {{ target }}, (select dbt_scd_id, dbt_change_type, dbt_valid_to from {{ source }}) as DBT_INTERNAL_SOURCE\n    set {{ target }}.dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target }}.dbt_scd_id\n    and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n    and {{ target }}.dbt_valid_to is null\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9170063}, "macro.dbt_mysql.mysql__snapshot_merge_sql_insert": {"unique_id": "macro.dbt_mysql.mysql__snapshot_merge_sql_insert", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshot\\snapshot_merge.sql", "name": "mysql__snapshot_merge_sql_insert", "macro_sql": "{% macro mysql__snapshot_merge_sql_insert(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9180045}, "macro.dbt_mysql.mysql__snapshot_hash_arguments": {"unique_id": "macro.dbt_mysql.mysql__snapshot_hash_arguments", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\snapshot\\strategies.sql", "original_file_path": "macros\\materializations\\snapshot\\strategies.sql", "name": "mysql__snapshot_hash_arguments", "macro_sql": "{% macro mysql__snapshot_hash_arguments(args) -%}\n    md5(concat_ws('|', {%- for arg in args -%}\n        coalesce(cast({{ arg }} as char), '')\n        {% if not loop.last %}, {% endif %}\n    {%- endfor -%}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.919004}, "macro.dbt_mysql.mysql__get_test_sql": {"unique_id": "macro.dbt_mysql.mysql__get_test_sql", "package_name": "dbt_mysql", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\mysql", "path": "macros\\materializations\\test\\test.sql", "original_file_path": "macros\\materializations\\test\\test.sql", "name": "mysql__get_test_sql", "macro_sql": "{% macro mysql__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      case\n        when {{ fail_calc }} {{ warn_if | replace(\"!=\",\"<>\") }} then 'true'\n        else 'false'\n      end as should_warn,\n      case\n        when {{ fail_calc }} {{ error_if | replace(\"!=\",\"<>\") }} then 'true'\n        else 'false'\n      end as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9200058}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9230063}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9240053}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9240053}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9250045}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9250045}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9260073}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9280062}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9300075}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9390051}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9410048}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9420044}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.943005}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9450047}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9470055}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9480052}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.949005}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9510067}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9560037}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9560037}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9570043}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.958008}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.958008}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.960007}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9610088}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9620068}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9630058}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9640067}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.966006}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.966006}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.966006}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9670048}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9680057}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.969005}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9720051}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.973004}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.973004}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.974005}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.975004}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.975004}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.976005}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.978008}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9790046}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.981007}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9820042}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9820042}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9830039}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.984004}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.984004}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9850032}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.989003}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.992003}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9940045}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9940045}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9970033}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.9980032}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001619.999004}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0000036}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.001003}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0020032}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0030057}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0040033}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0040033}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.005003}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0060031}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.007003}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.008003}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.008003}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.009003}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0100062}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.011007}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.014004}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.014004}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.014004}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0150032}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0150032}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0170033}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0180032}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0200078}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                  schema=schema,\n                                                                  database=database) %}\n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0530488}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0540068}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0630035}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0660036}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.067006}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0680056}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0690396}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.070004}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.079004}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0810404}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0830388}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.0850487}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.086006}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.086006}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.087005}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.087005}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.095008}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.098008}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.098008}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.099008}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.099008}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.100008}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.100008}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1010094}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier,\n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1070073}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1146257}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1166651}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1166651}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.117631}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1186657}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1186657}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1186657}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1186657}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.119666}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1206312}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1226354}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1346326}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1446364}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1466317}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1466317}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1476324}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1476324}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1476324}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1486316}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1516304}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1516304}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1526318}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1546307}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1716347}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1726336}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1736314}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.183632}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.183632}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1846318}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.18565}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.18565}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1876655}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1886673}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1886673}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.192632}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt_mysql.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1986315}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_mysql.mysql__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.1996305}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2006311}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2046323}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2056348}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2066696}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.207666}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2086308}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.210634}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1694001620.2116315}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "c:\\users\\ocamp\\desktop\\splitwise_dbt\\virtual-environment\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.splitwise.duplicates_validation": ["model.splitwise.splitwise_final"], "model.splitwise.earnings_final": [], "model.splitwise.limits": ["model.splitwise.monthly_percentages", "model.splitwise.some_months"], "model.splitwise.limits_final": ["model.splitwise.limits", "model.splitwise.splitwise_final"], "model.splitwise.monthly_costs": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final"], "model.splitwise.monthly_percentages": ["model.splitwise.earnings_final", "model.splitwise.earnings_final"], "model.splitwise.overall_costs": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final"], "model.splitwise.overall_costs_future_estimated": ["model.splitwise.overall_costs", "model.splitwise.some_months"], "model.splitwise.overall_costs_future_limits": ["model.splitwise.limits_final", "model.splitwise.limits_final", "model.splitwise.overall_costs", "model.splitwise.some_months"], "model.splitwise.overall_costs_future_planned": ["model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.some_months"], "model.splitwise.overall_forecast": ["model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs_future_estimated", "model.splitwise.overall_costs_future_limits", "model.splitwise.overall_costs_future_planned"], "model.splitwise.savings_final": ["model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final", "model.splitwise.splitwise_final"], "model.splitwise.some_months": [], "model.splitwise.splitwise_final": ["model.splitwise.earnings_final"], "model.splitwise.year_month": ["model.splitwise.splitwise_final"], "test.splitwise.unique_my_first_dbt_model_id.16e066b321": [], "test.splitwise.not_null_my_first_dbt_model_id.5fb22c2710": [], "test.splitwise.unique_my_second_dbt_model_id.57a0f8c493": [], "test.splitwise.not_null_my_second_dbt_model_id.151b76d778": []}, "child_map": {"model.splitwise.duplicates_validation": [], "model.splitwise.earnings_final": ["model.splitwise.monthly_percentages", "model.splitwise.monthly_percentages", "model.splitwise.splitwise_final"], "model.splitwise.limits": ["model.splitwise.limits_final"], "model.splitwise.limits_final": ["model.splitwise.overall_costs_future_limits", "model.splitwise.overall_costs_future_limits"], "model.splitwise.monthly_costs": [], "model.splitwise.monthly_percentages": ["model.splitwise.limits"], "model.splitwise.overall_costs": ["model.splitwise.overall_costs_future_estimated", "model.splitwise.overall_costs_future_limits", "model.splitwise.overall_costs_future_planned", "model.splitwise.overall_costs_future_planned", "model.splitwise.overall_forecast", "model.splitwise.overall_forecast", "model.splitwise.overall_forecast"], "model.splitwise.overall_costs_future_estimated": ["model.splitwise.overall_forecast"], "model.splitwise.overall_costs_future_limits": ["model.splitwise.overall_forecast"], "model.splitwise.overall_costs_future_planned": ["model.splitwise.overall_forecast"], "model.splitwise.overall_forecast": [], "model.splitwise.savings_final": [], "model.splitwise.some_months": ["model.splitwise.limits", "model.splitwise.overall_costs_future_estimated", "model.splitwise.overall_costs_future_limits", "model.splitwise.overall_costs_future_planned"], "model.splitwise.splitwise_final": ["model.splitwise.duplicates_validation", "model.splitwise.limits_final", "model.splitwise.monthly_costs", "model.splitwise.monthly_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.overall_costs", "model.splitwise.savings_final", "model.splitwise.savings_final", "model.splitwise.savings_final", "model.splitwise.savings_final", "model.splitwise.year_month"], "model.splitwise.year_month": [], "test.splitwise.unique_my_first_dbt_model_id.16e066b321": [], "test.splitwise.not_null_my_first_dbt_model_id.5fb22c2710": [], "test.splitwise.unique_my_second_dbt_model_id.57a0f8c493": [], "test.splitwise.not_null_my_second_dbt_model_id.151b76d778": []}}